
name: ESP32 S3

# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#onschedule
on:
  push:
  pull_request:
    paths-ignore:
      - 'examples/**'
      - 'README.md'
      - 'ci/*unix*.sh'
      - '.github/workflows/build_unix.yml'

jobs:
  tensorflow_micropython_esp32s3_build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Prepare to Build Tensorflow Micropython Firmware for ESP32
        run: |
          git submodule init
          git submodule update --recursive
          cd micropython
          git submodule update --init lib/axtls
          git submodule update --init lib/berkeley-db-1.xx
          cd ..
      - name: Get Cache Keys
        # later get this like this: git ls-remote --heads https://github.com/espressif/esp-idf
        # this commit is hard-coded in micropython/tools/ci.sh
        run: |
          IDF_COMMIT=5bb59b00e72f8f91eb24d8c65bf9a7ea2b8a4f5f
          echo "esp-idf-commit=$IDF_COMMIT" >> $GITHUB_ENV
#      - name: Cache esp-idf
#        id: cache-esp-idf
#        uses: actions/cache@v2
#        env:
#          cache-name: cache-esp-idf
#        with:
#          path: ./esp-idf
#          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.esp-idf-commit }}
      - name: Setup IDF
#        if: steps.cache-esp-idf.outputs.cache-hit != 'true'
        run: |
          source ./micropython/tools/ci.sh && ci_esp32_idf44_setup
          
      - name: Build micropython cross compiler
        run:  |
          source ./esp-idf/export.sh
          cd ./micropython
          echo "make -C mpy-cross V=1 clean all"
          make -C mpy-cross V=1 clean all

      - name: Build standard non-ps ram ESP32 S3 8MB FLASH
        run: |
          source ./esp-idf/export.sh

          echo "cd ./boards/esp32/MICROLITE_S3"
          cd ./boards/esp32/MICROLITE_S3

          echo "Building MICROLITE_S3"
          rm -rf build
          idf.py clean build

      - name: Archive ESP32-S3  MICROLITE firmware
        uses: actions/upload-artifact@v2
        with:
          name: microlite-esp32-s3-firmware
          path: |
            boards/esp32/MICROLITE_S3/build/bootloader/bootloader.bin
            boards/esp32/MICROLITE_S3/build/partition_table/partition-table.bin
            boards/esp32/MICROLITE_S3/build/micropython.bin

      - name: Build ESP32 S3 psram support and 8MB Flash firmware
        run: |
          source ./esp-idf/export.sh

          echo "cd ./boards/esp32/MICROLITE_S3_SPIRAM"
          cd ./boards/esp32/MICROLITE_S3_SPIRAM

          echo "Building MICROLITE_S3_SPIRAM"
          rm -rf builds
          idf.py clean build

      - name: Archive ESP32-MICROLITE_S3_SPIRAM firmware
        uses: actions/upload-artifact@v2
        with:
          name: microlite-esp32-s3-spiram-firmware
          path: |
            boards/esp32/MICROLITE_S3_SPIRAM/build/bootloader/bootloader.bin
            boards/esp32/MICROLITE_S3_SPIRAM/build/partition_table/partition-table.bin
            boards/esp32/MICROLITE_S3_SPIRAM/build/micropython.bin

      - name: Build ESP32 S3 psram support and 8MB Flash firmware - spiram cs gpio 20
        run: |
          source ./esp-idf/export.sh

          echo "cd ./boards/esp32/MICROLITE_S3_SPIRAM_CS_GPIO_20"
          cd ./boards/esp32/MICROLITE_S3_SPIRAM_CS_GPIO_20

          echo "Building MICROLITE_S3_SPIRAM_CS_GPIO_20"
          rm -rf builds
          idf.py clean build

      - name: Archive ESP32-MICROLITE_S3_SPIRAM_CS_GPIO_20 firmware
        uses: actions/upload-artifact@v2
        with:
          name: microlite-esp32-s3-spiram-cs-gpio-20-firmware
          path: |
            boards/esp32/MICROLITE_S3_SPIRAM_CS_GPIO_20/build/bootloader/bootloader.bin
            boards/esp32/MICROLITE_S3_SPIRAM_CS_GPIO_20/build/partition_table/partition-table.bin
            boards/esp32/MICROLITE_S3_SPIRAM_CS_GPIO_20/build/micropython.bin

      - name: Build ESP32 S3 psram support and 8MB Flash firmware - OCTAL SPIRAM
        run: |
          source ./esp-idf/export.sh

          echo "cd ./boards/esp32/MICROLITE_S3_SPIRAM_OCTAL"
          cd ./boards/esp32/MICROLITE_S3_SPIRAM_OCTAL

          echo "Building MICROLITE_S3_SPIRAM_OCTAL"
          rm -rf builds
          idf.py clean build

      - name: Archive ESP32-MICROLITE_S3_SPIRAM_OCTAL firmware
        uses: actions/upload-artifact@v2
        with:
          name: microlite-esp32-s3-spiram-octal-firmware
          path: |
            boards/esp32/MICROLITE_S3_SPIRAM_OCTAL/build/bootloader/bootloader.bin
            boards/esp32/MICROLITE_S3_SPIRAM_OCTAL/build/partition_table/partition-table.bin
            boards/esp32/MICROLITE_S3_SPIRAM_OCTAL/build/micropython.bin
